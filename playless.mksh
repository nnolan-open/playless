#!/usr/bin/env mksh
# Playless is provided with the MIT EXPAT licesnse below.
# author email: nnolan.open@gmail.com
# This has been tested on Debian Linux and FreeBSD 10

version="BETA 2" #(public) 
license="
Playless Version: $version. ( a CLI mp3 frontend for multiple mp3 handlers )
Copyright (C) 2014 Nickolas Nolan

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

"

# require list: find, less, sed, pgrep, awk, $player
# busybox variants of these should be fine,
# so long as the symlinks are in your path.


# TODO list
#!removed -o flag until major bugs fixed!

# - new bug. player override didn't check path.
#	tested with personally compiled c program not in PATH
# - comma separate the -o flag.
#	case should have allowed this.
# - use basename to get player overrides if not in path. 
#	does basename exist in *bsd? is it built in or path?
# - add pager override
# - add filetype override
# - replace some ifs with case-statements in main loop
#	and generally slim/clean
# - add support for equalizer files
#	primarily supported by mpg123.
# - check file mimetype on load.
#	will replace *.mp3 check
# - new, add, save, load should be consistant
#	some functions ask, while others use arg
# - add id3v2 tag support
#	in separate version


# change log
# -histdiff() phased back out and completely removed. code moved to addhist()
# - added clear to mainloop.
# -all single square braces replaced with double. it's all the rage in extended statements...
# -fixed bug "back to current"
# -added debug option to -o flag "-o debug" or "-o nofifo".
# - fifo put in place so that playloop could safely return the new history data to the parent
#   /------fifo implimentation----------------------------------------------------\
#   |-added -o option to disable fifo. "-o nofifo"
#   |-moved the unnamed, braced function after playtrack non-zero exit to waitEnd()
#   |-bugfix for playtrack() exiting non-zero when not caused by stoptrack()
#   |-added histdiff() function, which is similar to rmhist.  
#   |-moved the final exit and trap sequences to stopExit()
#   |-added FindFifoHome() and stopExit() to add and remove fifo
#   \------fifo implimentation----------------------------------------------------/
# -removed unessicary cases that were double or redundant
# -consolidated addpath() and loadpath() to path()
# -consolidated repeatative code in update()
# -added playnext() to make update() less complex
# -changed out killall for pkill with ppid checking!
# -check for pager and path
# -more binary checks, change to printmissing()
# -put mixer and player overrides in help
# -fixed bug: playlist too large to save
# -fixed vol time-hang bug
# -replaced regex-right sed with tr for BSD
# -added overrides -m and -p for mixer and player
# -added precheck binary locations with which 
# -extended checking to find alternative players and mixers


# before starting the program, we will define all functions first.

# update is somewhat of a master function 

# WARNING: playtrack must end on non-zero status for || to stop loop.
# if you modify the kill process, use causion not to create an infinate play loop
# if this occurs open a shell and kill the processes manually. if you do not know 
# how to kill processes manually, you should not be modifying this script.

update () {
	#messy.... resume and playstatus should be logically graphed and re-done.
        if [[ "$playstatus" == "playing" ]] || [[ "$playstatus" == "shuffle" ]]; then
		if [[ "$resume" == "next" ]]; then
			playnext $playstatus
		fi
		resume=$playstatus
		while [[ "$playstatus" == "playing" ]] || [[ "$playstatus" == "shuffle" ]] ; do 
                        localhist="${localhist}${current},"
			#playtrack phased out for now. paste of block at next comment
			currenttrack="${masterlist[$current]}"
			if [[ "$current" -lt "${#masterlist[@]}" ]]; then
				printf "%b" "current track: $current \n$currenttrack\n${tps1}"
				$player "$currenttrack" 2>/dev/null || playstatus="stopped"
				#$player "$currenttrack" 2>/dev/null & playerpid=$!
        			if [[ "$fifofile" != "/dev/null" ]] && [[ -p $fifofile ]]; then
					read -t 1 inbuff <> $fifofile
					if [[ "$inbuff" == "stopped" ]] ; then
						#this if statement prevents fifo que error from stopping the process
						playstatus="stopped"	
						unset inbuff
					fi
				fi
			else
				printf "%b" "no file to play\n"
				resume=$playstatus
				playstatus=stopped
			fi
			# next comment.... block ended here.
			fifoprint
			#stoptrack
			[[ "$playstatus" != "stopped" ]] && playnext ${playstatus}
        	done 2>/dev/null & kpid=$! 
	elif [[ "$playstatus" == "stopped" ]] && pgrep $player ; then
                stoptrack
        fi
}

# update calls on these as necessary.

# addhist and rmmhist are simply an array workaround
# whereby modification of global arrays in a double nested
# function seems to be broken in some shells.
 
#sections of < |sed 's/,/\n/g' > are being replaced with < |tr ',' '\n' > on
# account of bsd sed not being able to replace with regex on the right.
# http://www.linuxquestions.org/questions/linux-software-2/sed-insert-a-newline-why-does-not-it-work-158806/

fifoprint(){
        if [[ "$fifofile" != "/dev/null" ]] && [[ -p $fifofile ]]; then
		printf "%s" "$localhist" > $fifofile & 
	fi
}

addhist () { 
        # this if should allow playless to work without a fifo file, should
        # the user decide to override it or if neither (home or tmp) is writable.
        # history will not work fully.

	#nofifo option is broken. need to figure out how to force child exit to non-zero
        if [[ "$fifofile" != "/dev/null" ]] && [[ -p $fifofile ]]; then
               	sleep 1 
		read -t 1 fifoline <> $fifofile 
			if [[ "fifoline" == "" ]] ; then
				printf "warning: was unable to read previous track set to history"
			fi
			histdiff=("${histdiff[@]}" $fifoline)
                hist=${hist}${histdiff[@]}
        else    
                hist="${hist}${current},"
        fi      
        histarray=( `printf $hist | tr ',' '\n'` )
        histlen=$(( ${#histarray[@]} - 1 ))
        current=${histarray[$histlen]} 
        unset histdiff histlen
        hist="`printf \"%s,\" \"${histarray[@]}\"`"

}

rmhist () {
	histrm=$(( ${#histarray[@]} - 1 )) || histrm=123 #wtf?
	currenttrack=$(( $histrm - 1 ))
	current=${histarray[$currenttrack]}
	if [[ "${#histarray[@]}" -gt "1" ]]; then
		unset histarray[$histrm] histarray[$currenttrack]
	fi
	hist="`printf \"%s,\" \"${histarray[@]}\"`"
}

stoptrack () {
	if [[ $kpid != "" ]] ; then 
		print "stopped" > $fifofile 2>/dev/null &
		pkill -P $kpid 2>/dev/null 
	fi
}

playnext () { #should only be called by update loop
	if [[ "$1" == "shuffle" ]]; then
                current=$(( $RANDOM % ${#masterlist[@]} ))
                current=$(( $current - 1 ))
	elif [[ "$1" == "playing" ]]; then
                current=$(( $current + 1 ))		
	fi
}


path() {
	if [[ -d "$directory" ]]; then
                printf "%b" "building list."
		if [[ "$1" == "add" ]]; then
			masterlist=( ${masterlist[@]} `find "$directory" -name *.mp3` )
		elif [[ "$1" == "load" ]]; then
                	masterlist=( `find "$directory" -name *.mp3` ) # looking at replacing this for arguments
		fi
                printf "%b\n" "..done"
        else
             printf "%b\n" "could not laod directory"
        fi
}

savelist() {
	if [[ -f "$myfile" ]]; then
        	while [[ "$answer" != "y" ]] && [[ "$answer" != "n" ]]; do
                        printf "%b" "a file named $myfile already exists. replace?(y,n):"
                        read answer
		done
		if [[ "$answer" == "y" ]]; then
			#loop is a bugfix for list too long for printf. 
			#moved >myfile after loop so the file only opens once
                        touch $myfile ||break 
			printf "%b" "saving..."
                        for line in "${masterlist[@]}" ; do
                                printf "%s\n" "$line" 
                        done >$myfile || printf "%b" "couldn't save\n"
			printf "%b\n\n" "done"
		fi
		unset answer
	else	# these two statements could be somewhat consolidated
		if [[ "$myfile" != "" ]]; then
                        touch $myfile ||break
                        printf "%b" "saving..."
                        for line in "${masterlist[@]}" ; do
                                printf "%s\n" "$line" 
                        done >$myfile || printf "%b" "couldn't save\n"
                        printf "%b\n\n" "done"
		fi

        fi
	unset myfile
}

openlist() {
	if [[ -f "$myfile" ]]; then
		printf "%b" "reading list..."
		a=${#masterlist[@]}
		orig=$a
		while read line; do
			if [[ -f "$line" ]]; then
				 masterlist[$a]="$line"	
			fi
			a=$(( $a + 1 ));
		done < "$myfile"
		printf "%b" "number of tracks added: $(( ${#masterlist[@]} - $orig )) \n"
		unset orig
		unset a
	else
		printf "%b" "invalid file\n"
	fi
	unset myfile
}

readdir(){
        while [[ ! -d "$directory" ]]; do
        	printf "%b" "enter the playing directory without excapes: "
        	read directory          #read -p isn't portable
	done
}

printhelp() {
	printf "%b\n" "
PlayLess Version: $version
A directory based, playlist extension for your player. There
is a very simple command enterpreted interface.
Startup Options:
	-d /directory/, -f /path/to/playlist, -h help and exit
	-p player override, -m mixer override

commands:

        list || ls      displays the playlist in less or default pager 

        play <nnn>      plays the given track number, or play current track

        stop || s       stops the player

        next || n       goes to the next track (or random for shuffle)

        back || b       go back through tracks in the order played.

        shuffle         set shuffle mode. next or stop and play to take effect

        normal          set normal mode. next or stop and play to take effect

        volume || vol   enters your mixer. use ESC or q depending on the mixer.

        newdir <dir>    replace the existing playlist with a new directory
	
        addir <dir>     appends a new directory to your playllist.

	save <file>	saves playlist to a simple text file.

	load <file>	read a playlist from file, appending to the current list
	
	new		same as newdir

	add		same as addir

	clear           clears the screen

        help            display this help message

        license || lic  prints the full license

	exit || quit	kill all instances of the player, and quit Playless.
	
"
}

dbug() {
	if [[ "$debug" == "1" ]]; then
		eval "printf '%s\n' \"debug: \$1 is \${$1}\""
	fi
}

stopExit() {
		playstatus=stopped
                stoptrack
		if [[ "$fifofile" != "/dev/null" ]] && [[ -p "$fifofile" ]]; then
			read -t 0 nothing <> $fifofile
			rm -f $fifofile
		fi
                exit 0
}

printMissing() {
	if [[ "$1" == "mixer" ]] || [[ "$1" == "player" ]]; then
		printf "%s\n" "could not find any ${1}s
Please install one of the following or specify an 
override with no guaranteed testing:"

		eval "printf '%s\n' \"\${find$1[@]}\"" #messy...
	else
		printf "%s\n" "missing essential tool: $1"
	fi
	
	exit 2
}

setENV() {
	if [[ -z "$PATH" ]]; then
                export PATH="/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
                printf "%b\n" "WARNING: No path found\nattempting to set one through guesswork"
        fi

	if [[ -z $PAGER ]]; then
		export PAGER=less	
	fi

	export oldIFS=$IFS 
	export IFS=`printf "\n\b"`
	export playstatus=stopped
	export hist="0,"
	export current=0
	export tps1="playshell: "
	
	#even though IFS is set to newline, defining this way works here.
	findbins=( find $PAGER sed pgrep awk tr )
	for each in ${findbins[@]} ; do
                which $each 2>&1 >/dev/null || printMissing $each
        done
	
	findplayer=( mpg321 madplay mpg123 )
	for each in ${findplayer[@]} ; do
		if which $each 2>&1 >/dev/null ; then
                        export player=$each
                fi
	done

	findmixer=( aumix ossmixer mixerctl alsamixer )
	for each in ${findmixer[@]} ; do
		if which $each 2>&1 >/dev/null ; then
			export mixer=$each
		fi
	done
}

FindFifoHome() {
	if [[ -w "/tmp" ]] && [[ "$nofifo" != "1" ]]; then
	        fifofile="/tmp/playless.$$.fifo"
	elif [[ -w "$HOME" ]] && [[ "$nofifo" != "1" ]]; then
	        fifofile="$HOME/playless.$$.fifo"
	else
	        printf "%b\n" "warning: couldn't find a writable location for a fifo pipe.\nIt may also have been disabled by user flags.\nhistory will not work correctly"
	        fifofile=/dev/null
	fi

	if [[ -p $fifiofile ]]; then
	        printf "%b\n" "warning: fifo file already exists. last itteration must not have had any signal before closing"
	elif [[ "$nofifo" != "1" ]]; then
	        mkfifo $fifofile
	fi
}

checkArgs() {
	# retrieve the directory, either through args or by asking
	while getopts ":f:d:h:p:m:o:" opt; do 
		case $opt in
		d)	
			directory=$OPTARG
			readdir
			path load ;;
		
		f)
			myfile=$OPTARG
			if [[ -f "$myfile" ]]; then
				openlist
			else
				readdir
				path load
			fi ;;
	
		h)
			printhelp
			exit 0 ;;

		p) 
			if touch $OPTARG ; then
				player=$OPTARG
			else
				printf "%b\n" "could not find user defined player: $player \n looking within list of defaults."

			fi ;;

		m) 
			if touch $OPTARG ; then
                                mixer=$OPTARG
                        else
                                printf "%b\n" "could not find user defined mixer: $mixer \n looking within list of defaults."

                        fi ;;

		o)	
			options=(`printf $OPTARG | tr ',' '\n'`)
			case "${options[@]}" in
			debug)
					debug=1 ;; 
			nofifo)
					nofifo=1 ;;
			esac
			unset options ;;

		?)
			readdir        
			path load ;;
		esac
	
	done 
	
	if [[ "$#" == "0" ]] || [[ "$1" != -* ]]; then # this doublebracket needs a better syntax 
		readdir
		path load
	fi
	
	if [[ -z $mixer ]] || [[ "$mixer" == "" ]]; then
		printMissing mixer
	fi
	
	if [[ -z $player ]] || [[ "$player" == "" ]]; then
		printMissing player
	fi
	unset findbins
	unset findplayer
	unset findmixer
}

# end of functions
#--------------------------------------------------------#
# here is the shell section

setENV


checkArgs $@



FindFifoHome


trap "stopExit" INT #traps ctrl-c to stop track before quitting the program. else, this loop would continue.
#trap "playstatus=stopped ; fifoprint ; kill $playerpid 2>/dev/null ; echo \"trap QUIT\"" QUIT 
# warning# never do trap CHLD... it will invoke for every elif..


while [[ true ]] ; do
	printf "%b" "$tps1" 		#read -p isn't portable
	read input


	if [[ "$input" == "exit" ]] || [[ "$input" == "quit" ]] || [[ "$input" == "q" ]]; then
		stopExit
	elif [[ "$input" == "list" ]] || [[ "$input" == "ls" ]]; then
		i=0
		for each in ${masterlist[@]}; do 
			printf "%s\n" "$i $each"
			i=$(( i + 1 ))
		done | $PAGER
		unset i

        elif [[ "$input" == "volume" ]] || [[ "$input" == "vol" ]]; then
                $mixer

	elif [[ "`printf "$input" |awk '{print $1}'`" == "play" ]]; then
		chknum=`printf "$input" |awk '{print $2}'`
		if [[ "$playstatus" == "playing" ]] || [[ "$playstatus" == "shuffle" ]]; then
			stoptrack
			addhist
			resume=$playstatus
  		fi
		if [[ "$chknum" == +([0-9]) ]] && [[ "$chknum" != "" ]]; then
			current=$chknum
		fi
		playstatus="playing"
		unset chknum
		update 

	elif [[ "$input" == "stop" ]] || [[ "$input" == "s" ]]; then
		resume=$playstatus
		playstatus=stopped
		stoptrack
		addhist

        elif [[ "$input" == "next" ]] || [[ "$input" == "n" ]]; then
		stoptrack	
                playstatus=$resume
		resume=next
		addhist
		update	


	elif [[ "$input" == "shuffle" ]]; then
		playstatus=shuffle
		resume=shuffle

        elif [[ "$input" == "shuffleoff" ]] || [[ "$input" == "normal" ]]; then
                playstatus=playing
		resume=playing
		
	elif [[ "$input" == "back" ]] || [[ "$input" == "b" ]]; then
		stoptrack
                rmhist
		update

	elif [[ "$input" == "status" ]]; then
		printf "%b" "playstatus is $playstatus\n track number is $current \n current track:"
		printf "%s\n" "started at: ${masterlist[$current]}"
		dbug hist
		dbug current
	elif [[ "`printf "$input" |awk '{print $1}'`" == "newdir" ]] || [[ "`printf "$input" |awk '{print $1}'`" == "new" ]]; then
                directory=`printf "$input" |awk '{print substr($0, index($0,$2))}'`
                readdir
		path load
	
	elif [[ "`printf "$input" |awk '{print $1}'`" == "addir" ]] || [[ "`printf "$input" |awk '{print $1}'`" == "add" ]]; then 
                directory=`printf "$input" |awk '{print substr($0, index($0,$2))}'`
		readdir
		path add

        elif [[ "`printf "$input" |awk '{print $1}'`" == "save" ]]; then
		myfile=`printf "$input" |awk '{print substr($0, index($0,$2))}'`
		savelist

        elif [[ "`printf "$input" |awk '{print $1}'`" == "load" ]]; then
                myfile=`printf "$input" |awk '{print substr($0, index($0,$2))}'`
		openlist
	
        elif [[ "`printf "$input" |awk '{print $1}'`" == "file" ]]; then
                myfile=`printf "$input" |awk '{print substr($0, index($0,$2))}'`
		openfile
	
	elif [[ "$input" == "clear" ]]; then
		clear
	elif [[ "$input" == "help" ]]; then
		printhelp
	elif [[ "$input" == "license" ]] || [[ "$input" == "lic" ]] ; then
		printf "%b" "$license"
	fi

done
